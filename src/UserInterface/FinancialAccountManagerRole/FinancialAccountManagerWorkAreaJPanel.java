/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.FinancialAccountManagerRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.FinanceAccountManageOrganization;
import Business.Organization.Organization;
import Business.Purchase.AdvertiserPurchase;
import Business.Purchase.Purchase;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.PaymentWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author AnanthaShankar
 */
public class FinancialAccountManagerWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form FinancialAccountManagerWorkAreaJPanel
     */
    private JPanel upc;
    private Enterprise enterprise;
    private EcoSystem system;
    private UserAccount ua;

    public FinancialAccountManagerWorkAreaJPanel(JPanel upc, UserAccount ua, Enterprise enterprise, EcoSystem system) {
        initComponents();
        this.upc = upc;
        this.enterprise = enterprise;
        this.system = system;
        this.ua = ua;
        populateTable();
        populatePendingTable();
        // there should be window creating and processing work request of invoices
    }

    public void populatePendingTable() {
        DefaultTableModel dtm = (DefaultTableModel) pendgPaymJTbl.getModel();
        dtm.setRowCount(0);
        TreeMap<String, List<AdvertiserPurchase>> tm = new TreeMap<String, List<AdvertiserPurchase>>();
        TreeMap<String, Float> tm1 = new TreeMap<String, Float>();
        for (Purchase p : enterprise.getPurchHist().getPurchaseList()) {
            if (p instanceof AdvertiserPurchase) {
                AdvertiserPurchase ap = (AdvertiserPurchase) p;
                if (ap.getStatus().equalsIgnoreCase("Pending")) {
                   // ap.setStatus("Processing");
                    if (tm.containsKey(ap.getBuyer_Enterprise())) {
                        List<AdvertiserPurchase> lst = tm.get(ap.getBuyer_Enterprise());
                        lst.add(ap);
                        tm.put(ap.getBuyer_Enterprise(), lst);
                    } else {
                        List<AdvertiserPurchase> lst = new ArrayList<AdvertiserPurchase>();
                        lst.add(ap);
                        tm.put(ap.getBuyer_Enterprise(), lst);
                    }
                }

            }
        }

        for (String advertiser : tm.keySet()) {
            float total_amount = 0;
            for (AdvertiserPurchase ap : tm.get(advertiser)) {
                total_amount = total_amount + ap.getPurchaseAmount();
            }
            tm1.put(advertiser, total_amount);
        }

        for (String s : tm1.keySet()) {
            Object row[] = new Object[2];
            row[0] = s;
            row[1] = tm1.get(s);
            dtm.addRow(row);
        }

    }

    public void populateTable() {
        DefaultTableModel dtm = (DefaultTableModel) paymentRequestsJTable.getModel();
        dtm.setRowCount(0);

        for (WorkRequest request : ua.getWorkQueue().getWorkRequestList()) {

            Object[] row = new Object[4];
            row[0] = request;
            row[1] = request.getReceiver();
            row[2] = request.getStatus();
            row[3] = ((PaymentWorkRequest) request).getPaymentAmount();
            dtm.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        paymentRequestsJTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        pendgPaymJTbl = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        creatPayReqJBtn = new javax.swing.JButton();
        updtPurchHistJBtn = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        paymentRequestsJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Message", "Receiver", "Status", "Payment Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(paymentRequestsJTable);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Payment History");

        pendgPaymJTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Enterprise Name", "Payment Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(pendgPaymJTbl);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Pending Payments To Send Requests");

        creatPayReqJBtn.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        creatPayReqJBtn.setText("Create Payment Request");
        creatPayReqJBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                creatPayReqJBtnActionPerformed(evt);
            }
        });

        updtPurchHistJBtn.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        updtPurchHistJBtn.setText("Update Purchase History");
        updtPurchHistJBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updtPurchHistJBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 397, Short.MAX_VALUE)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(113, 113, 113)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(97, 97, 97)
                        .addComponent(creatPayReqJBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(103, 103, 103)
                        .addComponent(updtPurchHistJBtn)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(updtPurchHistJBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(creatPayReqJBtn)
                .addGap(22, 22, 22))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void creatPayReqJBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_creatPayReqJBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = pendgPaymJTbl.getSelectedRow();
        if (selectedRow == 0 || selectedRow > 0) {
            String s1 = (String) pendgPaymJTbl.getValueAt(selectedRow, 0);
            float s2 = (Float)(pendgPaymJTbl.getValueAt(selectedRow, 1));

            PaymentWorkRequest request = new PaymentWorkRequest();
            request.setMessage("Please Process The Payment");
            request.setSender(ua);
            request.setStatus("Sent");
            request.setSending_Enterprise(enterprise);
            request.setPaymentAmount(s2);
            request.setReceiving_Enterprise(s1);

            Organization org = null;
            for (Network n : system.getNetworkList()) {
                for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
                    if (e.getName().equalsIgnoreCase(s1)) {
                        for (Organization organization : e.getOrganizationDirectory().getOrgList()) {
                            if (organization instanceof FinanceAccountManageOrganization) {
                                org = organization;
                                break;
                            }
                        }
                        if (org != null) {
                            org.getWorkQueue().getWorkRequestList().add(request);
                            ua.getWorkQueue().getWorkRequestList().add(request);
                            populateTable();
                            populatePendingTable();
                        }
                        break;

                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a enterprise to send work request");
        }
    }//GEN-LAST:event_creatPayReqJBtnActionPerformed

    private void updtPurchHistJBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updtPurchHistJBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = paymentRequestsJTable.getSelectedRow();
        if (selectedRow >= 0) {
            WorkRequest request1 = (WorkRequest) paymentRequestsJTable.getValueAt(selectedRow, 0);
            PaymentWorkRequest request = (PaymentWorkRequest) request1;
            if (request.getStatus().equals("Declined")) {
                for (Purchase p : enterprise.getPurchHist().getPurchaseList()) {
                    if (p instanceof AdvertiserPurchase) {
                        AdvertiserPurchase ap = (AdvertiserPurchase) p;
                        if (ap.getStatus().equalsIgnoreCase("Processing") && ap.getBuyer_Enterprise().equals(request.getReceiving_Enterprise())) {
                            ap.setStatus("Pending");
                        }
                    }
                }
            } else if(request.getStatus().equals("Processed")){
                for (Purchase p : enterprise.getPurchHist().getPurchaseList()) {
                    if (p instanceof AdvertiserPurchase) {
                        AdvertiserPurchase ap = (AdvertiserPurchase) p;
                        if (ap.getStatus().equalsIgnoreCase("Processing") && ap.getBuyer_Enterprise().equals(request.getReceiving_Enterprise())) {
                                    ap.setStatus("Processed");
                        }
                    }
                }
            }
            populatePendingTable();
            populateTable();

        } else {
            JOptionPane.showMessageDialog(null, "Please Select A Row");
        }

    }//GEN-LAST:event_updtPurchHistJBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton creatPayReqJBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable paymentRequestsJTable;
    private javax.swing.JTable pendgPaymJTbl;
    private javax.swing.JButton updtPurchHistJBtn;
    // End of variables declaration//GEN-END:variables
}
