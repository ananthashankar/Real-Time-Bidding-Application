/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.UserRole;

import Business.CustomerHistory.CustomerBrowsing;
import Business.EcoSystem;
import Business.Enterprise.AdvertiserEnterprise;
import Business.Enterprise.PublisherEnterprise;
import Business.Person.Customer;
import Business.Product.AdvertiserProduct;
import Business.Product.Product;
import Business.Purchase.CustomerPurchase;
import Business.Purchase.Purchase;
import Business.Purchase.PurchaseHistory;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author AnanthaShankar
 */
public class AdvertiserProductDisplayJPanel extends javax.swing.JPanel {

    /**
     * Creates new form AdvertiserProductDisplayJPanel
     */
    private JPanel upc;
    private AdvertiserEnterprise ae;
    private EcoSystem system;
    private String interest;
    private UserAccount ua;
    private PublisherEnterprise pe;
    private ArrayList<CustomerPurchase> temp_Purchhist;
    Boolean isCheckedOut = false;

    public AdvertiserProductDisplayJPanel(JPanel upc, AdvertiserEnterprise ae, EcoSystem system, String interest,
            UserAccount ua, PublisherEnterprise pe) {
        initComponents();
        this.upc = upc;
        this.ae = ae;
        this.pe = pe;
        this.system = system;
        this.interest = interest;
        this.ua = ua;
        if (isCheckedOut == false) {
            temp_Purchhist = new ArrayList<CustomerPurchase>();
        }

        populateTable();
    }

    public void populateTable() {
        DefaultTableModel dtm = (DefaultTableModel) pubProdJTbl.getModel();
        dtm.setRowCount(0);

        for (Product p : ae.getProdDir().getProductCatalog()) {
            if (p instanceof AdvertiserProduct && p.getProductType().equalsIgnoreCase(interest)) {
                AdvertiserProduct prod = (AdvertiserProduct) p;
                Object row[] = new Object[3];
                row[0] = prod;
                row[1] = prod.getPrice();
                row[2] = prod.getAvailability();
                dtm.addRow(row);
            }
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        pubProdJTbl = new javax.swing.JTable();
        spnQuantitySpinner = new javax.swing.JSpinner();
        btnAddToCart = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        purchJTbl = new javax.swing.JTable();
        btnCheckOut = new javax.swing.JButton();
        backJBtn = new javax.swing.JButton();
        modQuanJButton = new javax.swing.JButton();
        modQuantJTextField = new javax.swing.JTextField();

        setBackground(new java.awt.Color(255, 255, 255));

        pubProdJTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product Name", "Price", "Availability"
            }
        ));
        jScrollPane1.setViewportView(pubProdJTbl);

        btnAddToCart.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnAddToCart.setText("Add to Cart");
        btnAddToCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddToCartActionPerformed(evt);
            }
        });

        purchJTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product Name", "Quantity", "Unit Price", "Total Price"
            }
        ));
        jScrollPane3.setViewportView(purchJTbl);

        btnCheckOut.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnCheckOut.setText("Check Out");
        btnCheckOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckOutActionPerformed(evt);
            }
        });

        backJBtn.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        backJBtn.setText("<<  Back");
        backJBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJBtnActionPerformed(evt);
            }
        });

        modQuanJButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        modQuanJButton.setText("Modify Quantity");
        modQuanJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modQuanJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(backJBtn)
                .addGap(66, 66, 66)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(modQuantJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnCheckOut)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                        .addComponent(modQuanJButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAddToCart)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(173, 173, 173)
                    .addComponent(spnQuantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 435, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(160, 160, 160)
                .addComponent(btnAddToCart)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 122, Short.MAX_VALUE)
                .addComponent(modQuantJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(modQuanJButton)
                    .addComponent(backJBtn)
                    .addComponent(btnCheckOut))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(8, 8, 8)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(spnQuantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(65, 65, 65)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(86, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddToCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddToCartActionPerformed
        // TODO add your handling code here:

        int selectedRow = pubProdJTbl.getSelectedRow();
        int quantity = (Integer) spnQuantitySpinner.getValue();

        if (selectedRow < 0) {
            JOptionPane.showConfirmDialog(null, "Please select a row");
            return;

        }
        AdvertiserProduct product = (AdvertiserProduct) pubProdJTbl.getValueAt(selectedRow, 0);
        if (quantity <= 0 || quantity > product.getAvailability()) {
            JOptionPane.showConfirmDialog(null, "quantity is bad");
            return;
        }
        Boolean isIncluded = false;
        for (CustomerPurchase cp : temp_Purchhist) {
            if (cp.getProductPurchased().getProdName().equals(product.getProdName())) {

                int oldQuantity = cp.getQuantity();
                int newQuantity = (Integer) spnQuantitySpinner.getValue();
                int availability = product.getAvailability();
                int total_Quantity = oldQuantity + newQuantity;
                // if(newQuantity > availability){
                //     JOptionPane.showConfirmDialog(null, "Total quantity exceeds availability");
                //  return;
                //}
                cp.setQuantity(total_Quantity);
                cp.setPurchaseAmount(total_Quantity * product.getPrice());
                int newAvailability = product.getAvailability() - newQuantity;
                product.setAvailability(newAvailability);
                isIncluded = true;
            }
        }

        if (!isIncluded) {
            CustomerPurchase cp = new CustomerPurchase();
            cp.setProductPurchased(product);
            cp.setPublisher_enterprise(pe.getName());
            int q = (Integer) spnQuantitySpinner.getValue();
            cp.setQuantity(q);
            cp.setPurchaseAmount(q * product.getPrice());
            cp.setSeller_enterprise(ae.getName());
            cp.setStatus("Pending");
            cp.setBuyer_Customer(ua.getUserName());
            int availability_new = product.getAvailability() - q;
            product.setAvailability(availability_new);
            temp_Purchhist.add(cp);
        }
        populateTable();
        populatePurchaseTable();

    }//GEN-LAST:event_btnAddToCartActionPerformed

    public void populatePurchaseTable() {
        DefaultTableModel dtm = (DefaultTableModel) purchJTbl.getModel();
        dtm.setRowCount(0);

        for (CustomerPurchase p : temp_Purchhist) {
            Object row[] = new Object[4];
            row[0] = p.getProductPurchased();
            row[1] = p.getQuantity();
            row[2] = p.getProductPurchased().getPrice();
            row[3] = p.getQuantity() * p.getProductPurchased().getPrice();
            dtm.addRow(row);
        }
    }

    private void btnCheckOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckOutActionPerformed
        // TODO add your handling code here:

        if (temp_Purchhist != null && temp_Purchhist.size() > 0) {

            for (CustomerPurchase cp : temp_Purchhist) {

                for (Product ap : ae.getProdDir().getProductCatalog()) {
                    if (ap instanceof AdvertiserProduct) {
                        AdvertiserProduct p = (AdvertiserProduct) ap;
                        if (cp.getProductPurchased().getProductId() == p.getProductId()) {

                            int temp1 = cp.getQuantity();
                            int temp2 = p.getTotal_sold();
                            int temp3 = temp1 + temp2;
                            p.setTotal_sold(temp3);
                            break;
                        }
                    }
                }
            }
            for (CustomerPurchase p : temp_Purchhist) {
                ae.getPurchHist().getPurchaseList().add(p);
                pe.getPurchHist().getPurchaseList().add(p);
                Customer c = (Customer) ua.getPerson();
                c.getPurchaseHistory().getPurchaseList().add(p);
            }
            ArrayList<CustomerPurchase> trans = temp_Purchhist;
            JOptionPane.showMessageDialog(null, "You have successfully checked out. Proceed To Payment?");
            isCheckedOut = true;
            temp_Purchhist = new ArrayList<CustomerPurchase>();

            populateTable();
            populatePurchaseTable();
            UserTransactionJPanel utj = new UserTransactionJPanel(upc, trans, ua, ae, pe, system);
            upc.add("User Transaction", utj);
            CardLayout layout = (CardLayout) upc.getLayout();
            layout.next(upc);

        } else {

            JOptionPane.showConfirmDialog(null, "Improper check out");

        }

    }//GEN-LAST:event_btnCheckOutActionPerformed

    private void backJBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJBtnActionPerformed
        // TODO add your handling code here:
        for (CustomerPurchase cp : temp_Purchhist) {

            for (Product p : ae.getProdDir().getProductCatalog()) {
                AdvertiserProduct ap = (AdvertiserProduct) p;
                if (ap.getProductId() == cp.getProductPurchased().getProductId()) {
                    int temp = ap.getAvailability() + cp.getQuantity();
                    ap.setAvailability(temp);
                    break;
                }

            }

        }
        upc.remove(this);
        CardLayout layout = (CardLayout) upc.getLayout();
        layout.previous(upc);
    }//GEN-LAST:event_backJBtnActionPerformed

    private void modQuanJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modQuanJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = purchJTbl.getSelectedRow();

        String reg = "[0-9]+";
        if (modQuantJTextField.getText().trim().length() == 0 || !(modQuantJTextField.getText().matches(reg))) {
            JOptionPane.showMessageDialog(null, "Invalid Quantity Value");
        } else if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row first.");
        } else if (Integer.parseInt(modQuantJTextField.getText()) <= 0) {
            JOptionPane.showMessageDialog(null, "Invalid Quantity Value");
        } else {
            try {
                CustomerPurchase o = (CustomerPurchase) purchJTbl.getValueAt(selectedRow, 0);
                for (CustomerPurchase oi : temp_Purchhist) {
                    if (oi.getProductPurchased().getProdName().equals(o.getProductPurchased().getProdName())) {
                        AdvertiserProduct p = oi.getProductPurchased();
                        int oldQuantity = oi.getQuantity();
                        int newQuantity = Integer.parseInt(modQuantJTextField.getText());
                        if ((p.getAvailability() + oldQuantity) < newQuantity) {
                            JOptionPane.showMessageDialog(null, "Invalid Quantity");
                        } else if (oldQuantity > newQuantity) {
                            int a = oldQuantity - newQuantity;
                            int availability = p.getAvailability();
                            int total_Quantity = newQuantity;
                            oi.setQuantity(total_Quantity);
                            int newAvailability = p.getAvailability() + a;
                            p.setAvailability(newAvailability);

                        } else {
                            int a = newQuantity - oldQuantity;
                            int availability = p.getAvailability();
                            int total_Quantity = newQuantity;
                            oi.setQuantity(total_Quantity);
                            int newAvailability = p.getAvailability() - a;
                            p.setAvailability(newAvailability);

                        }
                    }
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Invalid Quantity Value");
            }
        }
        populateTable();
        populatePurchaseTable();

    }//GEN-LAST:event_modQuanJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJBtn;
    private javax.swing.JButton btnAddToCart;
    private javax.swing.JButton btnCheckOut;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton modQuanJButton;
    private javax.swing.JTextField modQuantJTextField;
    private javax.swing.JTable pubProdJTbl;
    private javax.swing.JTable purchJTbl;
    private javax.swing.JSpinner spnQuantitySpinner;
    // End of variables declaration//GEN-END:variables
}
